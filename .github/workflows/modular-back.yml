name: modular backend

on:
  push:
    branches: [ "main", "develop", "fix/CICD" ]
  pull_request:
    branches: [ "main", "develop" ]

env:
  MODULAR_BACK_VERSION: dev.1.0.0

jobs:

  lint:
    name: Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]
    steps:
    - uses: actions/checkout@v4
    -
      name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    -
      name: Sort with isort
      uses: isort/isort-action@v1
    -
      name: Insatall Poetry
      uses: Gr1N/setup-poetry@v8
    -
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry/virtualenvs
        key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
    -
      name: Format with black
      run: |
        poetry add black
        poetry run black --check .

  build:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: lint
    # if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    # if: github.ref == 'refs/heads/develop'
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v5
        with:
          file: bot_constructor/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.BACKEND_IMAGE_NAME}}:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.BACKEND_IMAGE_NAME}}:${{ env.MODULAR_BACK_VERSION }}

  deploy:
    name: Deployment on remote server
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.MODULAR_HOST }}
          username: ${{ secrets.HOST_USER }}
          # password: ${{ secrets.HOST_USER_PWD }}
          key: ${{ secrets.HOST_SSH_KEY }}
          script: |
            docker stop ${{ vars.BACKEND_CONTAINER_NAME }}
            docker rm ${{ vars.BACKEND_CONTAINER_NAME }}
            docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.BACKEND_IMAGE_NAME }}:latest
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.BACKEND_IMAGE_NAME }}:latest
            docker run -d \
              --name=${{ vars.BACKEND_CONTAINER_NAME }} \
              --hostname=${{ vars.BACKEND_CONTAINER_NAME }} \
              --net=${{ secrets.MODULAR_NETWORK_NAME }} \
              --restart=unless-stopped \
              -v static_value:/app/static/ \
              -v media_value:/app/media/ \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.BACKEND_IMAGE_NAME }}:latest

  inform:
    name: Send message to Telegram account
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            Hey there!
            Рабочий поток ${{ github.workflow }} успешно выполнен!
            Репозиторий: ${{ github.repository }}
            Sincerely yours, ✨ Xwick Bot ✨
