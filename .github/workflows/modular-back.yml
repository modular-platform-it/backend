---
name: modular basic CICD
run-name: ${{ github.actor }} started ðŸš€ GitHub Actions
on:
  push:
    branches: [production, develop, feat/container-for-bot-server]
    paths-ignore: ['**/pyproject.toml']
  workflow_dispatch:
# env:
#   APP_VERSION: 0.0.1
#   APP_PROJECT_NAME: bot_constructor
#   POETRY_VERSION: ${{vars.PROJECT_POETRY_VERSION}}
#   APP_IMAGE_NAME: ${{vars.BOT_CONSTRUCTOR_IMAGE_NAME}}
#   APP_CONTAINER_NAME: ${{vars.BOT_CONSTRUCTOR_CONTAINER_NAME}}
#   SECRET_KEY: ${{secrets.DJANGO_SECRET_KEY}}
jobs:
  lint:
    uses: ./.github/workflows/rwf-precommit.yml
    with:
      PYTHON_VERSION: ${{vars.PROJECT_PYTHON_VERSION}}

  pytest:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Download lint job artifact
        uses: actions/download-artifact@v4
        with:
          path: lint/
      - uses: ./.github/workflows/rwf-pytest.yml
        with:
          APP_PROJECT_NAME: bot_constructor
          POETRY_VERSION: ${{vars.PROJECT_POETRY_VERSION}}

  # build:
  #   name: Push Docker image to Docker Hub
  #   if: github.ref_name == 'develop' || github.ref_name == 'production'
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v4
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     - name: Login to Docker
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{secrets.DOCKERHUB_USERNAME}}
  #         password: ${{secrets.DOCKERHUB_TOKEN}}
  #     - name: Push to Docker Hub
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: ./${{env.APP_PROJECT_NAME}}
  #         file: ${{env.APP_PROJECT_NAME}}/Dockerfile
  #         push: true
  #         tags: |
  #           ${{secrets.DOCKERHUB_USERNAME}}/${{env.APP_IMAGE_NAME}}:latest
  #           ${{secrets.DOCKERHUB_USERNAME}}/${{env.APP_IMAGE_NAME}}:${{env.APP_VERSION}}
  # deploy:
  #   name: Deployment on remote server
  #   if: github.ref_name == 'develop' || github.ref_name == 'production'
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: executing remote ssh commands
  #       uses: appleboy/ssh-action@v1.0.0
  #       with:
  #         host: ${{secrets.MODULAR_HOST}}
  #         username: ${{secrets.HOST_USER}}
  #         key: ${{secrets.HOST_SSH_KEY}}
  #         script: |
  #           docker stop ${{env.APP_CONTAINER_NAME}}
  #           docker rm ${{env.APP_CONTAINER_NAME}}
  #           docker rmi ${{secrets.DOCKERHUB_USERNAME}}/${{env.APP_IMAGE_NAME}}:latest
  #           docker pull ${{secrets.DOCKERHUB_USERNAME}}/${{env.APP_IMAGE_NAME}}:latest
  #           docker run -d \
  #             --name=${{env.APP_CONTAINER_NAME}} \
  #             --hostname=${{env.APP_CONTAINER_NAME}} \
  #             --net=${{secrets.MODULAR_NETWORK_NAME}} \
  #             --restart=unless-stopped \
  #             -e DEBUG=FALSE \
  #             -e DJANGO_SUPERUSER_USERNAME=${{secrets.DJANGO_SUPERUSER_USERNAME}} \
  #             -e DJANGO_SUPERUSER_PASSWORD=${{secrets.DJANGO_SUPERUSER_PASSWORD}} \
  #             -e DJANGO_SUPERUSER_EMAIL=${{secrets.DJANGO_SUPERUSER_EMAIL}} \
  #             -e ALLOWED_HOSTS=${{secrets.DJANGO_ALLOWED_HOSTS}} \
  #             -e CSRF_TRUSTED_ORIGINS=${{secrets.DJANGO_CSRF_TRUSTED_ORIGINS}} \
  #             -e POSTGRES_DB=${{secrets.DJANGO_DB_NAME}} \
  #             -e POSTGRES_USER=${{secrets.DJANGO_POSTGRES_USER}} \
  #             -e POSTGRES_PASSWORD=${{secrets.DJANGO_POSTGRES_PASSWORD}} \
  #             -e DB_HOST='postgres' \
  #             -e DB_PORT=5432 \
  #             -v bot_static:/app/bot_constructor/static/ \
  #             -v bot_media:/app/bot_constructor/media/ \
  #             ${{secrets.DOCKERHUB_USERNAME}}/${{env.APP_IMAGE_NAME}}:latest
  # notify:
  #   uses: ./.github/workflows/rwf-notify.yml
  #   needs: test
  #   secrets: inherit  # pragma: allowlist secret
