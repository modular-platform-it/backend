name: modular backend
run-name: ${{ github.actor }} started GitHub Actions üöÄ
on:
  push:
    branches: [ "main", "develop", "fix/CICD" ]
    paths-ignore:
      - 'pyproject.toml'
  pull_request:
    branches: [ "main", "develop" ]
  workflow_dispatch:

env:
  MODULAR_BACK_VERSION: 1.0.1
  POETRY_VERSION: "1.8.2"
  PYTHON_VERSION: "3.12"
  REGISTRY: ghcr.io

jobs:

  # test:
  #   name: Linters and Pytests
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix:
  #       python-version: [3.12]
  #   steps:
  #   - uses: actions/checkout@v4
  #   -
  #     name: Set up Python
  #     uses: actions/setup-python@v5
  #     with:
  #       python-version: ${{ matrix.python-version }}
  #   - uses: isort/isort-action@v1
  #   - uses: Gr1N/setup-poetry@v8
  #   -
  #     uses: actions/cache@v4
  #     with:
  #       path: ~/.cache/pypoetry/virtualenvs
  #       key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
  #   -
  #     name: Install dependencies
  #     run: poetry install
  #   -
  #     name: Format with black
  #     run: |
  #       poetry run black --check .
  #       python bot_constructor/manage.py test

  # build:
  #   name: Push Docker image to Docker Hub
  #   runs-on: ubuntu-latest
  #   # needs: test
  #   # if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
  #   # if: github.ref == 'refs/heads/develop'
  #   steps:
  #     - name: Check out the repo
  #       uses: actions/checkout@v4
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #     - name: Login to Docker
  #       uses: docker/login-action@v3
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}
  #     - name: Push to Docker Hub
  #       uses: docker/build-push-action@v5
  #       with:
  #         file: bot_constructor/Dockerfile
  #         push: true
  #         tags: |
  #           ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.BACKEND_IMAGE_NAME}}:latest
  #           ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.BACKEND_IMAGE_NAME}}:${{ env.MODULAR_BACK_VERSION }}

  # deploy:
  #   name: Deployment on remote server
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: executing remote ssh commands using password
  #       uses: appleboy/ssh-action@v1.0.0
  #       with:
  #         host: ${{ secrets.MODULAR_HOST }}
  #         username: ${{ secrets.HOST_USER }}
  #         # password: ${{ secrets.HOST_USER_PWD }}
  #         key: ${{ secrets.HOST_SSH_KEY }}
  #         script: |
  #           docker stop ${{ vars.BACKEND_CONTAINER_NAME }}
  #           docker rm ${{ vars.BACKEND_CONTAINER_NAME }}
  #           docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.BACKEND_IMAGE_NAME }}:latest
  #           docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.BACKEND_IMAGE_NAME }}:latest
  #           docker run -d \
  #             --name=${{ vars.BACKEND_CONTAINER_NAME }} \
  #             --hostname=${{ vars.BACKEND_CONTAINER_NAME }} \
  #             --net=${{ secrets.MODULAR_NETWORK_NAME }} \
  #             --restart=unless-stopped \
  #             -v static_value:/app/static/ \
  #             -v media_value:/app/media/ \
  #             ${{ secrets.DOCKERHUB_USERNAME }}/${{ vars.BACKEND_IMAGE_NAME }}:latest

  notify:
    runs-on: ubuntu-latest
    # needs: deploy
    steps:
      - name: Send Telegram Message
        uses: cbrgm/telegram-github-action@v1
        with:
          token: ${{ secrets.TELEGRAM_TOKEN }}
          to: ${{ secrets.TELEGRAM_TO }}
          message: |
            üçè Hey there! üçè
            –†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ ${{ github.workflow }} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!
            GitHub-c–µ—Ä–≤–µ—Ä: üñ•Ô∏è ${{ runner.os }}
            Event: üí° ${{ github.event_name }}
            –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:
              üêß ${{ github.repository }}
            –í–µ—Ç–∫–∞: üîé ${{ github.ref }}
            Sincerely yours, ‚ú® Xwick Bot ‚ú®
